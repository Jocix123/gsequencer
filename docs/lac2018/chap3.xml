<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (C) 2005-2018 Jo\u00EBl Kr\u00E4hemann -->
<!-- Permission is granted to copy, distribute and/or modify this document -->
<!-- under the terms of the GNU Free Documentation License, Version 1.3 -->
<!-- or any later version published by the Free Software Foundation; -->
<!-- with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. -->
<!-- A copy of the license is included in the section entitled "GNU -->
<!-- Free Documentation License". -->

<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
  <title>Effect processors as recalls</title>
  <para>
    AgsRecall is your base object to implement your own effect processor. Its class provides
    abstraction for most common use cases. But feel free to implement your own events to
    listen to.
  </para>
  
  <para>
    The AgsDynamicConnectable's interface methods ::connect-dynamic() and ::disconnect-dynamic()
    are related to dynamic dependencies. These are dependencies requiring to be resolved. This
    needs to be done during AgsRecall::resolve-dependencies() event as part of the initialization
    process.
  </para>  

  <para>
    ::run-init-pre(), ::run-init-inter() and ::run-init-post() are the 3 stages of recall
    initialization. This especially applies to AgsRecallAudioRun and AgsRecallChannelRun,
    which have a dynamic scope. These methods are called only once per lifetime of the recall.
  </para>

  <para>
    The recall may provide AgsPort instances to modify the behaviour of your effect processor
    in realtime. Each port might be automated but don't have to be. The ::automate() signal
    does usually apply the automation data. It is provided by AgsRecallAudio and AgsRecallChannel.
  </para>

  <para>
    AgsAutomation is segmented into chunks after AGS_AUTOMATION_DEFAULT_OFFSET number of audio tics
    (here each invocation AgsThread::run() is a tic), is a new automation object introduced for the
    very same port.
  </para>

  <para>
    ::run-pre(), ::run-inter() and ::run-post() are the 3 stages of processing. They are called continuesly
    in their well defined order. During one audio tic all 3 events are emitted.
  </para>

  <para>
    As most of the computation shall occur during ::run-inter(). Some specialized recalls use ::run-pre()
    like &quot;ags-play-notation&quot; or &quot;ags-copy-pattern&quot;. Since they produce new AgsAudioSignal
    objects needed by ::run-inter(). Providing feedback like &quot;ags-peak&quot; to a UI level indicator
    widget is processed during ::run-post().
  </para>

  <para>
    ::done() signal notifies about terminating the processing of recall.
  </para>

  <sect1>
    <title>LADSPA plugin host</title>

    <para>
      AgsLadspaPlugin provides an object to interface with LADSPA plugins. The LADSPA plugins are collected by
      AgsLadspaManager. You might want to set LADSPA_PATH environment variable. Thought the processing is done
      by a recall - AgsRecallLadspa and AgsRecallLadspaRun. All ports are exposed by a matching AgsPort.
    </para>
  </sect1>
  
  <sect1>
    <title>DSSI plugin host</title>
    
    <para>
      AgsDssiPlugin and AgsDssiManager does basically the same as the LADSPA counterparts. The difference is,
      its effect processors relay on additional recalls. AgsPlayDssiAudio as well AgsPlayDssiAudioRun are responsible
      to play AgsNotation related keys. Likewise is AgsRouteDssiAudio and AgsRouteDssiAudioRun which does the same.
      The differ in overhead versus flexibility. The later is able to use its own envelope information.
    </para>

    <para>
      Note there is no support for OSC protocol.
    </para>
  </sect1>

  <sect1>
    <title>LV2 plugin host</title>
    
    <para>
      AgsLv2Plugin and AgsLv2Manager is all the same as the other plugins. Like the DSSI host functionality it has
      AgsPlayLv2Audio and AgsPlayLv2AudioRun for instruments as well AgsRouteLv2Audio and AgsRouteLv2AudioRun.
    </para>

    <para>
      Worker threads, presets, programs and other interfaces are supported.
    </para>
  </sect1>
</chapter>
