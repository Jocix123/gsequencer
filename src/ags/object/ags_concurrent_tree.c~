/* GSequencer - Advanced GTK Sequencer
 * Copyright (C) 2005-2015 Joël Krähemann
 *
 * This file is part of GSequencer.
 *
 * GSequencer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GSequencer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GSequencer.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <ags/object/ags_concurrent_tree.h>

#include <stdio.h>

void ags_concurrent_tree_base_init(AgsDynamicConnectableInterface *interface);

/**
 * SECTION:ags_concurrent_tree
 * @short_description: unique access to recalls
 * @title: AgsDynamicConnectable
 * @section_id:
 * @include: ags/object/ags_concurrent_tree.h
 *
 * The #AgsDynamicConnectable interface gives you a unique access to recalls. Its main
 * purpose is to setup up signal handlers with dynamic context for ::connect-dynamic.
 * A dynamic context would be a dependency that has to be resolved first within run
 * initialization.
 */

GType
ags_concurrent_tree_get_type()
{
  static GType ags_type_concurrent_tree = 0;

  if(!ags_type_concurrent_tree){
    static const GTypeInfo ags_concurrent_tree_info = {
      sizeof(AgsDynamicConnectableInterface),
      (GBaseInitFunc) ags_concurrent_tree_base_init,
      NULL, /* base_finalize */
    };

    ags_type_concurrent_tree = g_type_register_static(G_TYPE_INTERFACE,
							  "AgsDynamicConnectable\0", &ags_concurrent_tree_info,
							  0);
  }

  return(ags_type_concurrent_tree);
}

void
ags_concurrent_tree_base_init(AgsDynamicConnectableInterface *interface)
{
  /* empty */
}
